str(large)
itemFrequency(large[,0:5])
itemFrequencyPlot(large,support=0.1)
itemFrequencyPlot(large,support=0.01)
itemFrequencyPlot(large,support=0.08)
itemFrequencyPlot(large,support=0.05)
itemFrequencyPlot(large, topN=10)
itemFrequencyPlot(large, topN=10)
image(large[1:100])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.003,confidence=0.25,minlen=2))
rule
summary(rule)
inspect(rule[1:5])
inspect(sort(rule,by="lift")[1:5])
beauty_rule <- subset(rule, items %in% "BEAUTY CARE")
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.003,confidence=0.25,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.0003,confidence=0.25,minlen=2))
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.0005,confidence=0.3,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.001,confidence=0.3,minlen=2))
inspect(rule[1:5])
inspect(sort(rule,by="lift")[1:5])
beauty_rule <- subset(rule, items %in% "YELLOW/PINK FLOWER DESIGN BIG MUG")
inspect(sort(beauty_rule,by="lift")[1:20])
beauty_rule <- subset(rule, items %in% "YELLOW/PINK FLOWER DESIGN BIG MUG")
inspect(sort(beauty_rule,by="lift"))
beauty_rule <- subset(rule, items %in% "FLOWER DESIGN BIG MUG")
inspect(sort(rule,by="lift")[1:5,inspect[lift < 10]])
# install.packages("arules")
library(arules)
large <- read.csv('large.csv')
large
large <- as(split(large[,"Description"], large[,"InvoiceNo"]), "transactions")
# inspect(large)
summary(large)
inspect(head(large))
str(large)
itemFrequency(large[,0:5])
itemFrequencyPlot(large,support=0.05)
itemFrequencyPlot(large, topN=10)
image(large[1:100])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.01,confidence=0.3,minlen=2))
rule
summary(rule)
inspect(rule[1:5])
inspect(sort(rule,by="lift")[1:5,inspect[lift < 10]])
inspect(sort(rule,by="lift")[1:5])
inspect(sort(rule,by="lift")[1:10])
inspect(sort(rule,by="lift")[1:20])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.1,confidence=0.3,minlen=2))
rule
inspect(rule[1:5])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.05,confidence=0.3,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.09,confidence=0.3,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(large,parameter = list(support=0.02,confidence=0.3,minlen=2))
rule
summary(rule)
inspect(rule[1:5])
inspect(sort(rule,by="lift")[1:20])
inspect(sort(rule,by="lift")[1:40])
inspect(sort(rule,by="lift")[1:100])
inspect(sort(rule,by="lift")[1:57])
install.packages("spark")
install.packages("SparkR")
library(SparkR)
# install.packages("arules")
install.packages("FPGrowthModel")
install.packages(c("Rcpp","rjson","bit64"))
install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
# install.packages("arules")
# install.packages(c("Rcpp","rjson","bit64"))
# install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
library(spark)
# install.packages("arules")
# install.packages(c("Rcpp","rjson","bit64"))
# install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
library(rCBa)
# install.packages("arules")
# install.packages(c("Rcpp","rjson","bit64"))
# install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
library(rCBa)
# install.packages("arules")
# install.packages(c("Rcpp","rjson","bit64"))
# install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
library(rCBA)
# install.packages("arules")
install.packages("rCBA)
# install.packages("arules")
# install.packages("arules")
install.packages("rCBA")
# install.packages("arules")
# install.packages("rCBA")
library(rCBA)
fp_rule <- fpgrowth(Groceries, support = 0.006, confidence = 0.3, maxLength = 2,
consequent = NULL, verbose = TRUE, parallel = TRUE)
# install.packages("arules")
# install.packages("rCBA")
library(rCBA)
library(arules)
data(Groceries)
summary(Groceries)
inspect(head(Groceries))
str(Groceries)
itemFrequency(Groceries[,0:5])
itemFrequencyPlot(Groceries,support=0.1)
itemFrequencyPlot(Groceries, topN=10)
image(Groceries[1:100])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(Groceries,parameter = list(support=0.003,confidence=0.25,minlen=2))
rule
fp_rule <- fpgrowth(Groceries, support = 0.006, confidence = 0.3, maxLength = 2,
consequent = NULL, verbose = TRUE, parallel = TRUE)
fp_rule <- fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 2,
consequent = NULL, verbose = TRUE, parallel = TRUE)
fp_rule <- rCBA::fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 2)
fp_rule <- rCBA::fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 2,consequent="Species")
fp_rule <- rCBA::fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 4,consequent="Species")
length(Groceries)
fp_rule <- rCBA::fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 9835,consequent="Species")
fp_rule <- rCBA::fpgrowth(Groceries, support = 0.06, confidence = 0.3, maxLength = 2,consequent="Species")
class(Groceries)
data(Groceries)
data(Groceries)
class(Groceries)
# install.packages("arules")
# install.packages("rCBA")
install.packages("sparklyr")
library(sparklyr)
df
df <- as(Groceries,"data.frame")
df
df <- as(Groceries,"data.frame")
df
length(Groceries)
fp_rule <- rCBA::fpgrowth(df, support = 0.06, confidence = 0.3, maxLength = 5,consequent="Species")
str(df)
fp_rule <- rCBA::fpgrowth(df, support = 0.06, confidence = 0.3, maxLength = 1,consequent="Species")
fp_rule <- rCBA::fpgrowth(df, support = 0.06, confidence = 0.3, maxLength = 9835,consequent="Species")
fp_rule <- rCBA::fpgrowth(df, support = 0.06, confidence = 0.3, maxLength = 5,consequent="items")
df
fp_rule <- rCBA::fpgrowth(df, support = 0.06, confidence = 0.3, maxLength = 5,consequent="items")
df <- as(Groceries,"data.frame")
txns <- as(df,"items")
txns <- as(df,"transactions")
fp_rule <- rCBA::fpgrowth(txns, support = 0.06, confidence = 0.3, maxLength = 5,consequent="items")
txns
inspect(txns[0:5])
inspect(txns[0:5])
itemFrequency(txns[0:5])
# install.packages("arules")
# install.packages("rCBA")
# install.packages("sparklyr")
install.packages("hanaml")
train <- sapply(Groceries,as.factor)
library("rCBA")
data("iris")
train <- sapply(iris,as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train,"transactions")
rules = rCBA::fpgrowth(txns, support=0.03, confidence=0.03, maxLength=2, consequent="Species",
parallel=FALSE)
predictions <- rCBA::classification(train,rules)
table(predictions)
sum(as.character(train$Species)==as.character(predictions),na.rm=TRUE)/length(predictions)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
predictions <- rCBA::classification(train, prunedRules)
table(predictions)
sum(as.character(train$Species)==as.character(predictions),na.rm=TRUE)/length(predictions)
small
small <- read.csv('df_small_id.csv')
small
small <- as(split(small[,"item"], small[,"t_id"]), "transactions")
small
dataset = read.csv("Online Retail.csv", na.strings = c("","NA"))
attach(dataset)
#checking if there any missing values, in which column(s) are they missing, and how many of them are missing
any(is.na(dataset))
apply(dataset, 2, function(x) any(is.na(x)))
sum(is.na(CustomerID))
sum(is.na(Description))
#cleaning the data set
dataset$InvoiceNo = as.character(InvoiceNo)
trim = function (x) gsub("^\\s+|\\s+$", "", x)
dataset$InvoiceNo = trim(InvoiceNo)
dataset$Description = trim(as.character(Description))
#a function that checks if a string starts with C
is_C = function (x) startsWith(x,"C")
dataset2 = dataset[which(!is_C(dataset$InvoiceNo)),]
dataset3 = subset(dataset2,!is.na(dataset2$Description))
#function str_detect is located in package "stringr"
library(stringr)
#buzzwords = c("WRONG","LOST", "CRUSHED", "SMASHED", "DAMAGED", "FOUND", "THROWN", "MISSING",
#              "AWAY", "\\?", "CHECK", "POSTAGE", "MANUAL", "CHARGES", "AMAZON", "FEE",
#              "FAULT", "SALES", "ADJUST", "COUNTED", "LABEL", "INCORRECT", "SOLD", "BROKEN",
#              "BARCODE", "CRACKED", "RETURNED", "MAILOUT", "DELIVERY", "MIX UP", "MOULDY",
#              "PUT ASIDE", "ERROR", "DESTROYED", "RUSTY")
#isUndesirable = function(x){
#  c=FALSE
#  for (i in 1:(length(buzzwords))){
#    c = c || ifelse(str_detect(toupper(x),buzzwords[i]),TRUE,FALSE)
#  }
#  return(c)
#}
isUndesirable2 = function(x) {
str_detect(toupper(x),"WRONG") | str_detect(toupper(x),"LOST") |
str_detect(toupper(x),"CRUSHED") | str_detect(toupper(x),"DAMAGE") |
str_detect(toupper(x),"FOUND") | str_detect(toupper(x),"THROWN") |
str_detect(toupper(x),"SMASHED") |
str_detect(toupper(x),"\\?") |
str_detect(toupper(x),"AWAY") | str_detect(toupper(x),"CHARGES") |
str_detect(toupper(x),"FEE") | str_detect(toupper(x),"FAULT")
str_detect(toupper(x),"SALES") | str_detect(toupper(x),"ADJUST") |
str_detect(toupper(x),"COUNTED") |
str_detect(toupper(x),"INCORRECT") |
str_detect(toupper(x),"BROKEN") | str_detect(toupper(x),"BARCODE") |
str_detect(toupper(x),"RETURNED") |
str_detect(toupper(x),"MAILOUT") | str_detect(toupper(x),"DELIVERY") |
str_detect(toupper(x),"MIX UP") | str_detect(toupper(x),"MOULDY") |
str_detect(toupper(x),"PUT ASIDE") | str_detect(toupper(x),"ERROR") |
str_detect(toupper(x),"DESTROYED") | str_detect(toupper(x),"RUSTY")
}
dataset4 = subset(dataset3, dataset3$Quantity > 0)
dataset5 = dataset4[which(!isUndesirable2(as.character(dataset4$Description))),]
Time = format(as.POSIXct(strptime(dataset5$InvoiceDate,"%Y-%m-%d %H:%M",tz="")) ,format = "%H:%M:%S")
dataset5$InvoiceDate = as.Date(dataset5$InvoiceDate)
dataset5$Description = as.factor(dataset5$Description)
#data preprocessing is done!
library(plyr)
library(arules)
items = ddply(dataset5,c("InvoiceNo"), function(x)paste(x$Description, collapse = ","))
head(items)
write.csv(items,"Items_List.csv",quote=FALSE, row.names = TRUE)
#creating the baskets
baskets = read.transactions("Items_List.csv", format='basket',sep=",")
summary(baskets)
#generating the rules
basket_rules = apriori(baskets,parameter = list(sup = 0.005, conf = 0.75))
basket_rules2 = apriori(baskets,parameter = list(sup = 0.01, conf = 0.7,maxlen=3))
basket_rules = sort(basket_rules, by='lift', decreasing = TRUE)
basket_rules2 = sort(basket_rules2, by = 'confidence', decreasing = TRUE)
summary(basket_rules)
inspect(basket_rules[1:10])
#visualizing the obtained rules
library(arulesViz)
#visualizing the obtained rules
install.packages("arulesViz")
#visualizing the obtained rules
install.packages("arulesViz")
library(arulesViz)
#scatterplot
plot(basket_rules)
summary(basket_rules2)
inspect(basket_rules2[1:10])
#graph
plot(basket_rules2[1:10],method="graph")
basket_rules3 = apriori(baskets, parameter=list(supp=0.002,conf = 0.8),
appearance = list(default="lhs",rhs="COFFEE"),
control = list(verbose=F))
basket_rules3 = sort(basket_rules3, decreasing=TRUE,by="confidence")
summary(basket_rules3)
inspect(basket_rules3[1:5])
basket_rules4 = apriori(baskets, parameter=list(supp=0.01,conf = 0.7),
appearance = list(default="rhs",lhs="SUGAR"),
control = list(verbose=F))
basket_rules4 = sort(basket_rules4, decreasing=TRUE,by="confidence")
summary(basket_rules4)
inspect(basket_rules4)
#function str_detect is located in package "stringr"
library(stringr)
#buzzwords = c("WRONG","LOST", "CRUSHED", "SMASHED", "DAMAGED", "FOUND", "THROWN", "MISSING",
#              "AWAY", "\\?", "CHECK", "POSTAGE", "MANUAL", "CHARGES", "AMAZON", "FEE",
#              "FAULT", "SALES", "ADJUST", "COUNTED", "LABEL", "INCORRECT", "SOLD", "BROKEN",
#              "BARCODE", "CRACKED", "RETURNED", "MAILOUT", "DELIVERY", "MIX UP", "MOULDY",
#              "PUT ASIDE", "ERROR", "DESTROYED", "RUSTY")
#isUndesirable = function(x){
#  c=FALSE
#  for (i in 1:(length(buzzwords))){
#    c = c || ifelse(str_detect(toupper(x),buzzwords[i]),TRUE,FALSE)
#  }
#  return(c)
#}
#function str_detect is located in package "stringr"
library(stringr)
#buzzwords = c("WRONG","LOST", "CRUSHED", "SMASHED", "DAMAGED", "FOUND", "THROWN", "MISSING",
#              "AWAY", "\\?", "CHECK", "POSTAGE", "MANUAL", "CHARGES", "AMAZON", "FEE",
#              "FAULT", "SALES", "ADJUST", "COUNTED", "LABEL", "INCORRECT", "SOLD", "BROKEN",
#              "BARCODE", "CRACKED", "RETURNED", "MAILOUT", "DELIVERY", "MIX UP", "MOULDY",
#              "PUT ASIDE", "ERROR", "DESTROYED", "RUSTY")
#isUndesirable = function(x){
#  c=FALSE
#  for (i in 1:(length(buzzwords))){
#    c = c || ifelse(str_detect(toupper(x),buzzwords[i]),TRUE,FALSE)
#  }
#  return(c)
#}
#function str_detect is located in package "stringr"
library(stringr)
buzzwords = c("WRONG","LOST", "CRUSHED", "SMASHED", "DAMAGED", "FOUND", "THROWN", "MISSING",
"AWAY", "\\?", "CHECK", "POSTAGE", "MANUAL", "CHARGES", "AMAZON", "FEE",
"FAULT", "SALES", "ADJUST", "COUNTED", "LABEL", "INCORRECT", "SOLD", "BROKEN",
"BARCODE", "CRACKED", "RETURNED", "MAILOUT", "DELIVERY", "MIX UP", "MOULDY",
"PUT ASIDE", "ERROR", "DESTROYED", "RUSTY")
isUndesirable = function(x){
c=FALSE
for (i in 1:(length(buzzwords))){
c = c || ifelse(str_detect(toupper(x),buzzwords[i]),TRUE,FALSE)
}
return(c)
}
dataset = read.csv("Online Retail.csv", na.strings = c("","NA"))
attach(dataset)
#checking if there any missing values, in which column(s) are they missing, and how many of them are missing
any(is.na(dataset))
apply(dataset, 2, function(x) any(is.na(x)))
sum(is.na(CustomerID))
sum(is.na(Description))
#cleaning the data set
dataset$InvoiceNo = as.character(InvoiceNo)
trim = function (x) gsub("^\\s+|\\s+$", "", x)
dataset$InvoiceNo = trim(InvoiceNo)
dataset$Description = trim(as.character(Description))
#a function that checks if a string starts with C
is_C = function (x) startsWith(x,"C")
dataset2 = dataset[which(!is_C(dataset$InvoiceNo)),]
dataset3 = subset(dataset2,!is.na(dataset2$Description))
#function str_detect is located in package "stringr"
library(stringr)
buzzwords = c("WRONG","LOST", "CRUSHED", "SMASHED", "DAMAGED", "FOUND", "THROWN", "MISSING",
"AWAY", "\\?", "CHECK", "POSTAGE", "MANUAL", "CHARGES", "AMAZON", "FEE",
"FAULT", "SALES", "ADJUST", "COUNTED", "LABEL", "INCORRECT", "SOLD", "BROKEN",
"BARCODE", "CRACKED", "RETURNED", "MAILOUT", "DELIVERY", "MIX UP", "MOULDY",
"PUT ASIDE", "ERROR", "DESTROYED", "RUSTY")
isUndesirable = function(x){
c=FALSE
for (i in 1:(length(buzzwords))){
c = c || ifelse(str_detect(toupper(x),buzzwords[i]),TRUE,FALSE)
}
return(c)
}
isUndesirable2 = function(x) {
str_detect(toupper(x),"WRONG") | str_detect(toupper(x),"LOST") |
str_detect(toupper(x),"CRUSHED") | str_detect(toupper(x),"DAMAGE") |
str_detect(toupper(x),"FOUND") | str_detect(toupper(x),"THROWN") |
str_detect(toupper(x),"SMASHED") |
str_detect(toupper(x),"\\?") |
str_detect(toupper(x),"AWAY") | str_detect(toupper(x),"CHARGES") |
str_detect(toupper(x),"FEE") | str_detect(toupper(x),"FAULT")
str_detect(toupper(x),"SALES") | str_detect(toupper(x),"ADJUST") |
str_detect(toupper(x),"COUNTED") |
str_detect(toupper(x),"INCORRECT") |
str_detect(toupper(x),"BROKEN") | str_detect(toupper(x),"BARCODE") |
str_detect(toupper(x),"RETURNED") |
str_detect(toupper(x),"MAILOUT") | str_detect(toupper(x),"DELIVERY") |
str_detect(toupper(x),"MIX UP") | str_detect(toupper(x),"MOULDY") |
str_detect(toupper(x),"PUT ASIDE") | str_detect(toupper(x),"ERROR") |
str_detect(toupper(x),"DESTROYED") | str_detect(toupper(x),"RUSTY")
}
dataset4 = subset(dataset3, dataset3$Quantity > 0)
dataset5 = dataset4[which(!isUndesirable2(as.character(dataset4$Description))),]
Time = format(as.POSIXct(strptime(dataset5$InvoiceDate,"%Y-%m-%d %H:%M",tz="")) ,format = "%H:%M:%S")
dataset5$InvoiceDate = as.Date(dataset5$InvoiceDate)
dataset5$Description = as.factor(dataset5$Description)
#data preprocessing is done!
library(plyr)
library(arules)
items = ddply(dataset5,c("InvoiceNo"), function(x)paste(x$Description, collapse = ","))
head(items)
write.csv(items,"Items_List.csv",quote=FALSE, row.names = TRUE)
#creating the baskets
baskets = read.transactions("Items_List.csv", format='basket',sep=",")
summary(baskets)
#generating the rules
basket_rules = apriori(baskets,parameter = list(sup = 0.005, conf = 0.75))
basket_rules2 = apriori(baskets,parameter = list(sup = 0.01, conf = 0.7,maxlen=3))
basket_rules = sort(basket_rules, by='lift', decreasing = TRUE)
basket_rules2 = sort(basket_rules2, by = 'confidence', decreasing = TRUE)
summary(basket_rules)
inspect(basket_rules[1:10])
#visualizing the obtained rules
# install.packages("arulesViz")
library(arulesViz)
#scatterplot
plot(basket_rules)
summary(basket_rules2)
inspect(basket_rules2[1:10])
#graph
plot(basket_rules2[1:10],method="graph")
basket_rules3 = apriori(baskets, parameter=list(supp=0.002,conf = 0.8),
appearance = list(default="lhs",rhs="COFFEE"),
control = list(verbose=F))
basket_rules3 = sort(basket_rules3, decreasing=TRUE,by="confidence")
summary(basket_rules3)
inspect(basket_rules3[1:5])
basket_rules4 = apriori(baskets, parameter=list(supp=0.01,conf = 0.7),
appearance = list(default="rhs",lhs="SUGAR"),
control = list(verbose=F))
basket_rules4 = sort(basket_rules4, decreasing=TRUE,by="confidence")
summary(basket_rules4)
inspect(basket_rules4)
dataset5.to_csv("large_clean.csv",index=FALSE)
write(dataset5, file="clean_large",sep ="," , quote=TRUE,row.names=FALSE)
write(dataset5, file="clean_large.csv",sep ="," )
write(dataset5, file="clean.csv",sep ="," , quote=TRUE,row.names=FALSE)
write(dataset5, file="clean.csv",sep ="," , quote=TRUE,row.names=TRUE)
write(dataset5, file="clean.csv",sep ="," )
str(dataset5)
write.csv(x=dataset5, file="clean")
write.csv(x=dataset5, file="clean.csv")
#visualizing the obtained rules
# install.packages("arulesViz")
library(arulesViz)
#scatterplot
plot(basket_rules)
summary(basket_rules2)
inspect(basket_rules2[1:10])
#graph
plot(basket_rules2[1:10],method="graph")
basket_rules3 = apriori(baskets, parameter=list(supp=0.002,conf = 0.8),
appearance = list(default="lhs",rhs="COFFEE"),
control = list(verbose=F))
basket_rules3 = sort(basket_rules3, decreasing=TRUE,by="confidence")
summary(basket_rules3)
inspect(basket_rules3[1:5])
basket_rules4 = apriori(baskets, parameter=list(supp=0.01,conf = 0.7),
appearance = list(default="rhs",lhs="SUGAR"),
control = list(verbose=F))
basket_rules4 = sort(basket_rules4, decreasing=TRUE,by="confidence")
summary(basket_rules4)
inspect(basket_rules4)
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.436,confidence=0.25,minlen=2))
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.436,confidence=0.25,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.218,confidence=0.25,minlen=2))
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.218,confidence=0.25,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.0145,confidence=0.25,minlen=2))
rule
summary(rule)
inspect(rule[1:5])
inspect(rule)
inspect(sort(rule,by="lift")[1:14])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.0145,minlen=2))
inspect(sort(rule,by="lift")[1:10])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.0145,minlen=2))
rule
inspect(sort(rule,by="lift")[1:10])
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.0145,minlen=2))
rule
# assume there are averagely 30 transaction per day
# support = 30/9835
rule <- apriori(small,parameter = list(support=0.0145,confidence=0.01,minlen=2))
rule
summary(rule)
inspect(rule)
inspect(sort(rule,by="lift")[1:10])
inspect(sort(rule,by="confidence")[1:10])
inspect(sort(rule,by="confidence")[1:10])
inspect(sort(rule,by="lift")[1:10])
summary(large)
str(dataset5)
summary(dataset5)
summary(dataset5)
summary(as(split(dataset5[,"Description"], dataset5[,"InvoiceNo"]), "transactions"))
large=as(split(dataset5[,"Description"], dataset5[,"InvoiceNo"]), "transactions")
large=as(split(dataset5[,"Description"], dataset5[,"InvoiceNo"]), "transactions")
summary(large)
itemFrequencyPlot(large,support=0.05)
itemFrequencyPlot(large[1:10],support=0.05)
itemFrequencyPlot(large[1:10],support=0.05)
itemFrequencyPlot(large,support=0.05)[1:10]
itemFrequencyPlot(large,support=0.0348)
itemFrequencyPlot(large,topN=10)
